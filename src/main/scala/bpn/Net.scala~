package bpn
import mathext._
/**
 * Class for managing a neural network.
 */
class Net(val inputs: Seq[InputLayer], val outputs: Seq[NetOutput], val bias: BiasLayer) {
  /**
   * Sets all the inputs to the network
   */
  def setInputs(data: Seq[Matrix]) = {
    for (i ← (0 to inputs.size - 1)) inputs(i).y = data(i)
    bias.setBatchSize(data(0).rows)
  }

  /**
   * Sets the target outputs of the network
   */
  def setTargets(data: Seq[Matrix]) = {
    for (i ← (0 to outputs.size - 1)) outputs(i).targets = data(i)
  }

  def forwardProp() = {
    inputs foreach { i ⇒ i.forward() }
    bias.forward()
    if (bpn.verbosity >= 70) {
      print("Overall error:")
      println((for (o <- outputs) yield o.avgSumErr).sum)
    }
  }

  def backProp() = {
    outputs foreach { o ⇒ o.backward() }
  }

  def propCycle() = {
    forwardProp()
    backProp()
  }

  def fullCycle() = {
    propCycle()
    learn()
  }

  def learn() = {
    inputs foreach { i ⇒ i.learn() }
    bias.learn()
  }
}
